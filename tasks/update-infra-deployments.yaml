apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: update-infra-deployments
spec:
  description: Update redhat-appstudio/infra-deployments repository
  params:
    - name: SCRIPT
      description: Script for changing the infra-deployments
    - name: ORIGIN_REPO
    - name: REVISION
    - name: shared-secret
      default: infra-deployments-pr-creator
  volumes:
    - name: infra-deployments-pr-creator
      csi:
        readOnly: true
        driver: csi.sharedresource.openshift.io
        volumeAttributes:
          sharedSecret: $(params.shared-secret)
    # Must-contain:
      #'id_rsa' - deploy key for redhat-appstudio-mr-creation/infra-deployments/
      #'appstudio-staging-ci' - private key for appstudio-staging-ci Github app
  steps:
    - name: update-infra-deployments
      image: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:af7dd5b3b1598a980f17d5f5d3d8a4b11ab4f5184677f7f17ad302baa36bd3c1
      volumeMounts:
        - name: infra-deployments-pr-creator
          mountPath: /secrets/deploy-key
      script: |
        cp -R /secrets/deploy-key ~/.ssh
        chmod 700 ~/.ssh
        chmod -R 400 ~/.ssh/*
        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

        git config --global user.name "auto-update"
        git config --global user.email ""

        REPO_NAME=$(echo $(params.ORIGIN_REPO) | cut -f5 -d/)

        git clone https://github.com/redhat-appstudio/infra-deployments
        cd infra-deployments
        git remote add push git@github.com:redhat-appstudio-mr-creation/infra-deployments.git
        git checkout -b $REPO_NAME

        $(params.SCRIPT)

        git commit -a -m "$REPO_NAME update" -m "Automatic update"
        git push -f --set-upstream push $REPO_NAME
    # Based on https://github.com/tektoncd/catalog/tree/main/task/github-app-token/0.2/
    - name: create-mr
      image: quay.io/chmouel/github-app-token@sha256:b4f2af12e9beea68055995ccdbdb86cfe1be97688c618117e5da2243dc1da18e
      volumeMounts:
        - name: infra-deployments-pr-creator
          mountPath: /secrets/deploy-key
      env:
        - name: GITHUBAPP_KEY_PATH
          value: /secrets/deploy-key/appstudio-staging-ci
        - name: GITHUBAPP_APP_ID
          value: "172616"
        - name: GITHUBAPP_INSTALLATION_ID
          value: "23331085"
        - name: GITHUB_API_URL
          value: https://api.github.com
        - name: ORIGIN_REPO
          value: $(params.ORIGIN_REPO)
        - name: REVISION
          value: $(params.REVISION)
      script: |
        #!/usr/bin/env python3
        import json
        import os
        import time

        import requests
        from jwcrypto import jwk, jwt

        EXPIRE_MINUTES_AS_SECONDS = int(os.environ.get('GITHUBAPP_TOKEN_EXPIRATION_MINUTES', 10)) * 60
        # TODO support github enteprise
        GITHUB_API_URL = os.environ.get('GITHUB_API_URL')


        class GitHub():
            token = None

            def __init__(self, private_key, app_id=None, installation_id=None):
                if not isinstance(private_key, bytes):
                    raise ValueError(f'"{private_key}" parameter must be byte-string')
                self._private_key = private_key
                self.app_id = app_id
                self.token = self._get_token(installation_id)

            def _load_private_key(self, pem_key_bytes):
                return jwk.JWK.from_pem(pem_key_bytes)

            def _app_token(self, expire_in=EXPIRE_MINUTES_AS_SECONDS):
                key = self._load_private_key(self._private_key)
                now = int(time.time())
                token = jwt.JWT(
                    header={"alg": "RS256"},
                    claims={
                        "iat": now,
                        "exp": now + expire_in,
                        "iss": self.app_id
                    },
                    algs=["RS256"],
                )
                token.make_signed_token(key)
                return token.serialize()

            def _get_token(self, installation_id=None):
                app_token = self._app_token()
                if not installation_id:
                    return app_token

                req = self._request(
                    "POST",
                    f"/app/installations/{installation_id}/access_tokens",
                    headers={
                        "Authorization": f"Bearer {app_token}",
                        "Accept": "application/vnd.github.machine-man-preview+json"
                    })

                ret = req.json()
                if 'token' not in ret:
                    raise Exception(f"Authentication errors: {ret}")

                return ret['token']

            def _request(self, method, url, headers={}, data={}):
                if self.token and 'Authorization' not in headers:
                    headers.update({"Authorization": "Bearer " + self.token})
                if not url.startswith("http"):
                    url = f"{GITHUB_API_URL}{url}"
                return requests.request(method,
                                        url,
                                        headers=headers,
                                        data=json.dumps(data))

            def create_mr(self):
                repo_name = os.environ.get('ORIGIN_REPO').split('/')[-1]
                req = self._request(
                    "POST",
                    f"/repos/redhat-appstudio/infra-deployments/pulls",
                    headers={
                        "Authorization": f"Bearer {self.token}",
                        "Accept": "application/vnd.github.v3+json"
                    },
                    data={
                        "head": f"redhat-appstudio-mr-creation:{repo_name}",
                        "base": "main",
                        "title": f"{repo_name} update",
                        "maintainer_can_modify": False
                    })
                json_output = req.json()
                print(json_output)
                return json_output

            def get_pr(self):
                repo_name = os.environ.get('ORIGIN_REPO').split('/')[-1]
                req = self._request(
                    "GET",
                    f"/repos/redhat-appstudio/infra-deployments/pulls",
                    headers={
                        "Accept": "application/vnd.github.v3+json"
                    })
                json_output = req.json()
                for item in json_output:
                    if item["user"]["login"] == "appstudio-staging-ci[bot]" and item["head"]["ref"] == repo_name:
                        return item

            def get_pr_url_from_sha(self, sha):
                req = self._request(
                    "GET",
                    f"/search/issues?q={sha}",
                    headers={
                        "Accept": "application/vnd.github.v3+json"
                    })
                return req.json()["items"][0]["pull_request"]["html_url"]

            def update_mr_description(self, pr_url, description):
                req = self._request(
                    "PATCH",
                    pr_url,
                    headers={
                        "Authorization": f"Bearer {self.token}",
                        "Accept": "application/vnd.github.v3+json"
                    },
                    data={ "body": description })
                json_output = req.json()
                print(json_output)


        def main():
            with open(os.environ['GITHUBAPP_KEY_PATH'], 'rb') as key_file:
                key = key_file.read()

            if os.environ.get('GITHUBAPP_APP_ID'):
                app_id = os.environ['GITHUBAPP_APP_ID']
            else:
                raise Exception("application id is not set")

            print(f"Getting user token for application_id: {app_id}")
            github_app = GitHub(
                key,
                app_id=app_id,
                installation_id=os.environ.get('GITHUBAPP_INSTALLATION_ID'))
            infra_pr = github_app.create_mr()
            if "url" not in infra_pr:
                infra_pr = github_app.get_pr()
            description = infra_pr["body"]
            if description == None:
                description = "Included PRs:"
            new_pr_link = github_app.get_pr_url_from_sha(os.environ["REVISION"])
            new_description = f"{description}\r\n- {new_pr_link}"
            github_app.update_mr_description(infra_pr["url"], new_description)

        if __name__ == '__main__':
            main()
